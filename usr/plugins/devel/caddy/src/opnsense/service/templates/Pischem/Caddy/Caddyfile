# DO NOT EDIT THIS FILE -- OPNsense auto-generated file

{% set generalSettings = helpers.getNodeByTag('Pischem.caddy.general') %}

# Global Options
{
    storage file_system {
        root /usr/local/etc/caddy
    }
    log {
        {% if generalSettings.LogAccessPlain|default("0") == "0" %}
        {% for reverse in helpers.toList('Pischem.caddy.reverseproxy.reverse') %}
        {% if reverse.enabled|default("0") == "1" and reverse.AccessLog|default("0") == "1" %}
        include http.log.access.{{ reverse['@uuid'] }}
        {% endif %}
        {% endfor %}
        {% endif %}
        output net unixgram//var/caddy/var/run/log {
        }
        format json {
            time_format rfc3339
        }
    }

    {% set accessListUuid = generalSettings.accesslist %}
    {% set logCredentials = generalSettings.LogCredentials %}

    {% set hasAccessList = false %}
    {% set hasLogCredentials = false %}

    {% if accessListUuid %}
        {% set accessList = helpers.toList('Pischem.caddy.reverseproxy.accesslist') | selectattr('@uuid', 'equalto', accessListUuid) | first %}
        {% if accessList %}
            {% set hasAccessList = true %}
        {% endif %}
    {% endif %}

    {% if logCredentials == '1' %}
        {% set hasLogCredentials = true %}
    {% endif %}

    {% if hasAccessList or hasLogCredentials %}
    servers {
        {% if hasAccessList %}
        trusted_proxies static {{ accessList.clientIps.split(',') | join(' ') }}
        {% endif %}
        {% if hasLogCredentials %}
        log_credentials
        {% endif %}
    }
    {% endif %}

    {% set dnsProvider = helpers.toList('Pischem.caddy.general.TlsDnsProvider') | first %}
    {% set dnsApiKey = generalSettings.TlsDnsApiKey %}
    {% set dnsSecretApiKey = generalSettings.TlsDnsSecretApiKey %}
    {% set dnsOptionalField1 = generalSettings.TlsDnsOptionalField1 %}
    {% set dnsOptionalField2 = generalSettings.TlsDnsOptionalField2 %}
    {% set dnsOptionalField3 = generalSettings.TlsDnsOptionalField3 %}
    {% set dnsOptionalField4 = generalSettings.TlsDnsOptionalField4 %}
    {% set dnsOptionalField5 = generalSettings.TlsDnsOptionalField5 %}
    {% set dnsOptionalField6 = generalSettings.TlsDnsOptionalField6 %}
    {% set dynDnsSimpleHttp = generalSettings.DynDnsSimpleHttp %}
    {% set dynDnsInterface = generalSettings.DynDnsInterface %}
    {% set dynDnsCheckInterval = generalSettings.DynDnsCheckInterval %}
    {% set dynDnsIpVersions = generalSettings.DynDnsIpVersions %}
    {% set dynDnsTTL = generalSettings.DynDnsTTL %}
    {% set dynDnsDomains = [] %}

    {% for reverse in helpers.toList('Pischem.caddy.reverseproxy.reverse') %}
        {% if reverse.enabled|default("0") == "1" and reverse.DynDns|default("0") == "1" %}
            {% set cleanedDomain = reverse.FromDomain | replace("*.","") %}
            {% do dynDnsDomains.append(cleanedDomain + " @") %}
        {% endif %}

        {% for subdomain in helpers.toList('Pischem.caddy.reverseproxy.subdomain') %}
            {% if subdomain.enabled|default("0") == "1" and subdomain.DynDns|default("0") == "1" and subdomain.reverse == reverse['@uuid'] %}
                {% set fullSubdomain = subdomain.FromDomain %}
                {% set baseDomain = fullSubdomain.split('.')[1:] | join('.') %}
                {% set subDomainPart = fullSubdomain.split('.')[0] %}
                {% set subdomainEntry = baseDomain + " " + subDomainPart %}
                {% do dynDnsDomains.append(subdomainEntry) %}
            {% endif %}
        {% endfor %}
    {% endfor %}

    {% if dnsProvider and dnsProvider != "none" and dnsProvider != "acmedns" and dnsApiKey and dynDnsDomains|length > 0 %}
        dynamic_dns {
            {% if dnsProvider in ['porkbun', 'desec', 'route53', 'alidns', 'googleclouddns', 'azure', 'openstack-designate', 'ovh', 'namecheap', 'powerdns', 'ddnss', 'linode', 'tencentcloud', 'dinahosting', 'hexonet', 'mailinabox'] %}
                provider {{ dnsProvider }} {
                    {% if dnsProvider == 'porkbun' %}
                        api_key {{ dnsApiKey }}
                        api_secret_key {{ dnsSecretApiKey }}
                    {% elif dnsProvider == 'desec' %}
                        token {{ dnsApiKey }}
                    {% elif dnsProvider == 'route53' %}
                        access_key_id {{ dnsApiKey }}
                        secret_access_key {{ dnsSecretApiKey }}
                    {% elif dnsProvider == 'alidns' %}
                        access_key_id {{ dnsApiKey }}
                        access_key_secret {{ dnsSecretApiKey }}
                    {% elif dnsProvider == 'googleclouddns' %}
                        gcp_project {{ dnsApiKey }}
                    {% elif dnsProvider == 'azure' %}
                        tenant_id {{ dnsApiKey }}
                        client_id {{ dnsSecretApiKey }}
                        client_secret {{ dnsOptionalField1 }}
                        subscription_id {{ dnsOptionalField2 }}
                        resource_group_name {{ dnsOptionalField3 }}
                    {% elif dnsProvider == 'openstack-designate' %}
                        region_name {{ dnsApiKey }}
                        tenant_id {{ dnsSecretApiKey }}
                        identity_api_version {{ dnsOptionalField1 }}
                        password {{ dnsOptionalField2 }}
                        username {{ dnsOptionalField3 }}
                        tenant_name {{ dnsOptionalField4 }}
                        auth_url {{ dnsOptionalField5 }}
                        endpoint_type {{ dnsOptionalField6 }}
                    {% elif dnsProvider == 'ovh' %}
                        endpoint {{ dnsApiKey }}
                        application_key {{ dnsSecretApiKey }}
                        application_secret {{ dnsOptionalField1 }}
                        consumer_key {{ dnsOptionalField2 }}
                    {% elif dnsProvider == 'namecheap' %}
                        api_key {{ dnsApiKey }}
                        user {{ dnsSecretApiKey }}
                        api_endpoint {{ dnsOptionalField1 }}
                        client_ip {{ dnsOptionalField2 }}
                    {% elif dnsProvider == 'powerdns' %}
                        server_url {{ dnsApiKey }}
                        api_token {{ dnsSecretApiKey }}
                    {% elif dnsProvider == 'ddnss' %}
                        api_token {{ dnsApiKey }}
                        username {{ dnsSecretApiKey }}
                        password {{ dnsOptionalField1 }}
                    {% elif dnsProvider == 'linode' %}
                        api_token {{ dnsApiKey }}
                        api_url {{ dnsSecretApiKey }}
                        api_version {{ dnsOptionalField1 }}
                    {% elif dnsProvider == 'tencentcloud' %}
                        secret_id {{ dnsApiKey }}
                        secret_key {{ dnsSecretApiKey }}
                    {% elif dnsProvider == 'dinahosting' %}
                        username {{ dnsApiKey }}
                        password {{ dnsSecretApiKey }}
                    {% elif dnsProvider == 'hexonet' %}
                        username {{ dnsApiKey }}
                        password {{ dnsSecretApiKey }}
                    {% elif dnsProvider == 'mailinabox' %}
                        api_url {{ dnsApiKey }}
                        email_address {{ dnsSecretApiKey }}
                        password {{ dnsOptionalField1 }}
                    {% endif %}
                }
            {% elif dnsProvider in ['metaname'] %}
                provider {{ dnsProvider }} {{ dnsApiKey }} {{ dnsSecretApiKey }}
            {% else %}
                provider {{ dnsProvider }} {{ dnsApiKey }}
            {% endif %}
            domains {
                {% for domain in dynDnsDomains %}
                {{ domain }}
                {% endfor %}
            }
        {% if dynDnsSimpleHttp %}
        ip_source simple_http {{ dynDnsSimpleHttp }}
        {% endif %}
        {% if dynDnsInterface %}
            {% set physicalInterfaceNames = [] %}
            {% for intfName in dynDnsInterface.split(',') %}
                {% do physicalInterfaceNames.append(helpers.physical_interface(intfName)) %}
            {% endfor %}
            ip_source interface {{ physicalInterfaceNames | join(',') }}
        {% endif %}
        {% if dynDnsCheckInterval %}
        check_interval {{ dynDnsCheckInterval }}m
        {% endif %}
        {% if dynDnsIpVersions %}
        versions {{ dynDnsIpVersions }}
        {% endif %}
        {% if dynDnsTTL %}
        ttl {{ dynDnsTTL }}h
        {% endif %}
    }
    {% endif %}

    {% set emailValue = helpers.toList('Pischem.caddy.general.TlsEmail') | first %}
    {% if emailValue %}
    email {{ emailValue }}
    {% endif %}
    {% set autoHttpsValue = helpers.toList('Pischem.caddy.general.TlsAutoHttps') | first %}
    {% if autoHttpsValue != "on" %}
    auto_https {{ autoHttpsValue }}
    {% endif %}
    import /usr/local/etc/caddy/caddy.d/*.global
}

# Reverse Proxy Configuration
{% macro tls_configuration(dnsProvider, dnsApiKey, customCert, dnsChallenge, dnsSecretApiKey, TlsDnsOptionalField1, TlsDnsOptionalField2, TlsDnsOptionalField3, TlsDnsOptionalField4, TlsDnsOptionalField5, TlsDnsOptionalField6) %}
    {% if dnsChallenge == "1" and dnsProvider and dnsProvider != "none" and dnsApiKey %}
        {% if dnsProvider in ['porkbun', 'desec', 'route53', 'acmedns', 'alidns', 'googleclouddns', 'azure', 'openstack-designate', 'ovh', 'namecheap', 'powerdns', 'ddnss', 'linode', 'tencentcloud', 'dinahosting', 'hexonet', 'mailinabox'] %}
            tls {
                dns {{ dnsProvider }} {
                    {% if dnsProvider == 'porkbun' %}
                        api_key {{ dnsApiKey }}
                        api_secret_key {{ dnsSecretApiKey }}
                    {% elif dnsProvider == 'desec' %}
                        token {{ dnsApiKey }}
                    {% elif dnsProvider == 'route53' %}
                        access_key_id {{ dnsApiKey }}
                        secret_access_key {{ dnsSecretApiKey }}
                    {% elif dnsProvider == 'acmedns' %}
                        username {{ dnsApiKey }}
                        password {{ dnsSecretApiKey }}
                        subdomain {{ dnsOptionalField1 }}
                        server_url {{ dnsOptionalField2 }}
                    {% elif dnsProvider == 'alidns' %}
                        access_key_id {{ dnsApiKey }}
                        access_key_secret {{ dnsSecretApiKey }}
                    {% elif dnsProvider == 'googleclouddns' %}
                        gcp_project {{ dnsApiKey }}
                    {% elif dnsProvider == 'azure' %}
                        tenant_id {{ dnsApiKey }}
                        client_id {{ dnsSecretApiKey }}
                        client_secret {{ dnsOptionalField1 }}
                        subscription_id {{ dnsOptionalField2 }}
                        resource_group_name {{ dnsOptionalField3 }}
                    {% elif dnsProvider == 'openstack-designate' %}
                        region_name {{ dnsApiKey }}
                        tenant_id {{ dnsSecretApiKey }}
                        identity_api_version {{ dnsOptionalField1 }}
                        password {{ dnsOptionalField2 }}
                        username {{ dnsOptionalField3 }}
                        tenant_name {{ dnsOptionalField4 }}
                        auth_url {{ dnsOptionalField5 }}
                        endpoint_type {{ dnsOptionalField6 }}
                    {% elif dnsProvider == 'ovh' %}
                        endpoint {{ dnsApiKey }}
                        application_key {{ dnsSecretApiKey }}
                        application_secret {{ dnsOptionalField1 }}
                        consumer_key {{ dnsOptionalField2 }}
                    {% elif dnsProvider == 'namecheap' %}
                        api_key {{ dnsApiKey }}
                        user {{ dnsSecretApiKey }}
                        api_endpoint {{ dnsOptionalField1 }}
                        client_ip {{ dnsOptionalField2 }}
                    {% elif dnsProvider == 'powerdns' %}
                        server_url {{ dnsApiKey }}
                        api_token {{ dnsSecretApiKey }}
                    {% elif dnsProvider == 'ddnss' %}
                        api_token {{ dnsApiKey }}
                        username {{ dnsSecretApiKey }}
                        password {{ dnsOptionalField1 }}
                    {% elif dnsProvider == 'linode' %}
                        api_token {{ dnsApiKey }}
                        api_url {{ dnsSecretApiKey }}
                        api_version {{ dnsOptionalField1 }}
                    {% elif dnsProvider == 'tencentcloud' %}
                        secret_id {{ dnsApiKey }}
                        secret_key {{ dnsSecretApiKey }}
                    {% elif dnsProvider == 'dinahosting' %}
                        username {{ dnsApiKey }}
                        password {{ dnsSecretApiKey }}
                    {% elif dnsProvider == 'hexonet' %}
                        username {{ dnsApiKey }}
                        password {{ dnsSecretApiKey }}
                    {% elif dnsProvider == 'mailinabox' %}
                        api_url {{ dnsApiKey }}
                        email_address {{ dnsSecretApiKey }}
                        password {{ dnsOptionalField1 }}
                    {% endif %}
                }
            }
        {% elif dnsProvider in ['metaname'] %}
            tls {
                dns {{ dnsProvider }} {{ dnsApiKey }} {{ dnsSecretApiKey }}
            }
        {% else %}
            tls {
                dns {{ dnsProvider }} {{ dnsApiKey }}
            }
        {% endif %}
    {% endif %}
    {% if customCert %}
        tls /usr/local/etc/caddy/certificates/temp/{{ customCert }}.pem /usr/local/etc/caddy/certificates/temp/{{ customCert }}.key
    {% endif %}
{% endmacro %}

{% macro reverse_proxy_configuration(handle) %}
    {{ handle.HandleType }} {{ handle.HandlePath|default("") }} {
        {% if handle.ToPath|default("") != "" %}
        rewrite * {{ handle.ToPath }}{uri}
        {% endif %}
        reverse_proxy {{ handle.ToDomain }}{% if handle.ToPort %}:{{ handle.ToPort }}{% endif %} {
            {% if handle.HttpTls|default("0") == "1" %}
            {% if handle.HttpNtlm|default("0") == "1" %}
            transport http_ntlm {
                tls
                {% if handle.HttpTlsTrustedCaCerts %}
                tls_trusted_ca_certs /usr/local/etc/caddy/certificates/temp/{{ handle.HttpTlsTrustedCaCerts }}.pem
                {% endif %}
                {% if handle.HttpTlsServerName %}
                tls_server_name {{ handle.HttpTlsServerName }}
                {% endif %}
            }
            {% else %}
            transport http {
                tls
                {% if handle.HttpTlsTrustedCaCerts %}
                tls_trusted_ca_certs /usr/local/etc/caddy/certificates/temp/{{ handle.HttpTlsTrustedCaCerts }}.pem
                {% endif %}
                {% if handle.HttpTlsServerName %}
                tls_server_name {{ handle.HttpTlsServerName }}
                {% endif %}
            }
            {% endif %}
            {% endif %}
        }
    }
{% endmacro %}

{% macro access_list_configuration(accesslist, invert) %}
    {% set client_ips = accesslist.clientIps.split(',') %}
    {% set client_ips_space_separated = client_ips | join(' ') %}
    @{{ accesslist['@uuid'] }} {
        {{ 'not' if invert else '' }} client_ip {{ client_ips_space_separated }}
    }
{% endmacro %}

{% macro basicauth_configuration(basicauth_uuids) %}
    {% if basicauth_uuids %}
    basicauth {
        {% for uuid in basicauth_uuids.split(',') %}
            {% set basicauth = helpers.toList('Pischem.caddy.reverseproxy.basicauth') | selectattr('@uuid', 'equalto', uuid) | first %}
            {% if basicauth %}
                {{ basicauth.basicauthuser }} {{ basicauth.basicauthpass }}
            {% endif %}
        {% endfor %}
    }
    {% endif %}
{% endmacro %}

{% for reverse in helpers.toList('Pischem.caddy.reverseproxy.reverse') %}
{% if reverse.enabled|default("0") == "1" %}
# Reverse Proxy Domain: "{{ reverse['@uuid'] }}"
{{ reverse.FromDomain|default("") }}{% if reverse.FromPort %}:{{ reverse.FromPort }}{% endif %} {
    {% if reverse.AccessLog|default("0") == "1" %}
    {% if generalSettings.LogAccessPlain|default("0") == "0" %}
    log {{ reverse['@uuid'] }}
    {% else %}
    log {
        output file /var/log/caddy/access/{{ reverse['@uuid'] }}.log {
            roll_keep_for {{ generalSettings.LogAccessPlainKeep|default("10") }}d
        }        
    }
    {% endif %}
    {% endif %}
    {% set customCert = reverse.CustomCertificate|default("") %}
    {% set dnsChallenge = reverse.DnsChallenge|default("0") %}
    {{ tls_configuration(dnsProvider, dnsApiKey, customCert, dnsChallenge, dnsSecretApiKey, TlsDnsOptionalField1, TlsDnsOptionalField2, TlsDnsOptionalField3, TlsDnsOptionalField4, TlsDnsOptionalField5, TlsDnsOptionalField6) }}
    
    {% if not reverse.accesslist %}
        {% set basicauth_uuids = reverse.basicauth %}
        {{ basicauth_configuration(basicauth_uuids) }}
    {% endif %}
    
    {% for subdomain in helpers.toList('Pischem.caddy.reverseproxy.subdomain') %}
    {% if subdomain.enabled|default("0") == "1" and subdomain.reverse == reverse['@uuid'] %}
    @{{ subdomain['@uuid'] }} {
        host {{ subdomain.FromDomain }}{% if subdomain.FromPort %}:{{ subdomain.FromPort }}{% endif %}
    }
    handle @{{ subdomain['@uuid'] }} {
    
        {% if not subdomain.accesslist %}
            {% set subdomain_basicauth_uuids = subdomain.basicauth %}
            {{ basicauth_configuration(subdomain_basicauth_uuids) }}
        {% endif %}
    
        {% if subdomain.accesslist %}
        {% set accesslist = helpers.toList('Pischem.caddy.reverseproxy.accesslist') | selectattr('@uuid', 'equalto', subdomain.accesslist) | first %}
        {{ access_list_configuration(accesslist, accesslist.accesslistInvert|default("0") == "1") }}
        handle @{{ accesslist['@uuid'] }} {
        
            {% set subdomain_basicauth_uuids = subdomain.basicauth %}
            {{ basicauth_configuration(subdomain_basicauth_uuids) }}
        
            {% set subdomain_handles = helpers.toList('Pischem.caddy.reverseproxy.handle') | selectattr('subdomain', 'equalto', subdomain['@uuid']) | list %}
            {% for handle in subdomain_handles %}
            {% if handle.enabled|default("0") == "1" and handle.HandlePath %}
                {{ reverse_proxy_configuration(handle) }}
            {% endif %}
            {% endfor %}
            {% for handle in subdomain_handles %}
            {% if handle.enabled|default("0") == "1" and not handle.HandlePath %}
                {{ reverse_proxy_configuration(handle) }}
            {% endif %}
            {% endfor %}
        }
        {% else %}
        {% set subdomain_handles = helpers.toList('Pischem.caddy.reverseproxy.handle') | selectattr('subdomain', 'equalto', subdomain['@uuid']) | list %}
        {% for handle in subdomain_handles %}
        {% if handle.enabled|default("0") == "1" and handle.HandlePath %}
            {{ reverse_proxy_configuration(handle) }}
        {% endif %}
        {% endfor %}
        {% for handle in subdomain_handles %}
        {% if handle.enabled|default("0") == "1" and not handle.HandlePath %}
            {{ reverse_proxy_configuration(handle) }}
        {% endif %}
        {% endfor %}
        {% endif %}
        {% if Pischem.caddy.general.abort|default("0") == "1" %}
        abort
        {% endif %}
    }
    {% endif %}
    {% endfor %}

    {% if reverse.accesslist %}
    {% set accesslist = helpers.toList('Pischem.caddy.reverseproxy.accesslist') | selectattr('@uuid', 'equalto', reverse.accesslist) | first %}
    {{ access_list_configuration(accesslist, accesslist.accesslistInvert|default("0") == "1") }}
    handle @{{ accesslist['@uuid'] }} {
    
        {% set basicauth_uuids = reverse.basicauth %}
        {{ basicauth_configuration(basicauth_uuids) }}
    
        {% set wildcard_handles = helpers.toList('Pischem.caddy.reverseproxy.handle') | selectattr('reverse', 'equalto', reverse['@uuid']) | selectattr('subdomain', 'undefined') | list %}
        {% for handle in wildcard_handles %}
        {% if handle.enabled|default("0") == "1" and handle.HandlePath %}
            {{ reverse_proxy_configuration(handle) }}
        {% endif %}
        {% endfor %}
        {% for handle in wildcard_handles %}
        {% if handle.enabled|default("0") == "1" and not handle.HandlePath %}
            {{ reverse_proxy_configuration(handle) }}
        {% endif %}
        {% endfor %}
    }
    {% else %}
    {% set wildcard_handles = helpers.toList('Pischem.caddy.reverseproxy.handle') | selectattr('reverse', 'equalto', reverse['@uuid']) | selectattr('subdomain', 'undefined') | list %}
    {% for handle in wildcard_handles %}
    {% if handle.enabled|default("0") == "1" and handle.HandlePath %}
        {{ reverse_proxy_configuration(handle) }}
    {% endif %}
    {% endfor %}
    {% for handle in wildcard_handles %}
    {% if handle.enabled|default("0") == "1" and not handle.HandlePath %}
        {{ reverse_proxy_configuration(handle) }}
    {% endif %}
    {% endfor %}
    {% endif %}
    {% if Pischem.caddy.general.abort|default("0") == "1" %}
    abort
    {% endif %}
}
{% endif %}
{% endfor %}

import /usr/local/etc/caddy/caddy.d/*.conf
